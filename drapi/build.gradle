plugins {
    id 'com.android.library'
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}

group = 'dk.youtec'
version = 1.0

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 18
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    // Specify Kotlin/JVM stdlib dependency.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "com.soywiz:klock:1.1.1"

    testImplementation "com.soywiz:klock:1.1.1"
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

kotlin {
    targets {
        targetFromPreset(presets.android, 'androidLib')
        targetFromPreset(presets.iosArm64, 'iosArm64')
        targetFromPreset(presets.iosX64, 'iosX64') {
            binaries {
                framework {
                    // Disable bitcode embedding for the simulator build.
                    embedBitcode("disable")
                }
            }
        }
    }

    sourceSets {
        all {
            languageSettings {
                languageVersion = '1.3'
                apiVersion = '1.3'
                enableLanguageFeature('InlineClasses')
                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes')
                progressiveMode = true
            }
        }
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.10.0"
                implementation "io.ktor:ktor-client-core:1.1.2"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"
            }
        }
        androidLibMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.10.0"
                implementation "com.squareup.okhttp3:okhttp:3.12.1"
                implementation "com.squareup.okhttp3:logging-interceptor:3.12.0"
                implementation "io.ktor:ktor-client-okhttp:1.1.1"
            }
        }
        androidLibTest {
            dependencies {
            }
        }
        iosMain {
            dependencies {
                implementation "io.ktor:ktor-client-ios:1.1.2"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.10.0"
            }
        }
        iosTest {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.1.1"
            }
        }
    }

    configure([targets.iosX64, targets.iosArm64]) {
        compilations.main.source(sourceSets.iosMain)
        compilations.test.source(sourceSets.iosTest)
    }
}

task copyFramework {
    setGroup("ios")
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIosX64"

    doLast {
        def srcFile = file('build/bin/iosX64/debugFramework/')
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile
            into targetDir
            include 'drapi.framework/**'
            include 'drapi.framework.dSYM'
        }
    }
}

task iosTest {
    setGroup("ios")
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}
